// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// Client_ServiceClient is the client API for Client_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Client_ServiceClient interface {
	Map(ctx context.Context, in *MapReduceRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	Reduce(ctx context.Context, in *MapReduceRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error)
}

type client_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClient_ServiceClient(cc grpc.ClientConnInterface) Client_ServiceClient {
	return &client_ServiceClient{cc}
}

func (c *client_ServiceClient) Map(ctx context.Context, in *MapReduceRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/Client_Service/map", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client_ServiceClient) Reduce(ctx context.Context, in *MapReduceRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/Client_Service/reduce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client_ServiceClient) Status(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, "/Client_Service/status", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Client_ServiceServer is the server API for Client_Service service.
// All implementations must embed UnimplementedClient_ServiceServer
// for forward compatibility
type Client_ServiceServer interface {
	Map(context.Context, *MapReduceRequest) (*CommonResponse, error)
	Reduce(context.Context, *MapReduceRequest) (*CommonResponse, error)
	Status(context.Context, *Empty) (*StatusResponse, error)
	mustEmbedUnimplementedClient_ServiceServer()
}

// UnimplementedClient_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedClient_ServiceServer struct {
}

func (UnimplementedClient_ServiceServer) Map(context.Context, *MapReduceRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Map not implemented")
}
func (UnimplementedClient_ServiceServer) Reduce(context.Context, *MapReduceRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reduce not implemented")
}
func (UnimplementedClient_ServiceServer) Status(context.Context, *Empty) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Status not implemented")
}
func (UnimplementedClient_ServiceServer) mustEmbedUnimplementedClient_ServiceServer() {}

// UnsafeClient_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Client_ServiceServer will
// result in compilation errors.
type UnsafeClient_ServiceServer interface {
	mustEmbedUnimplementedClient_ServiceServer()
}

func RegisterClient_ServiceServer(s *grpc.Server, srv Client_ServiceServer) {
	s.RegisterService(&_Client_Service_serviceDesc, srv)
}

func _Client_Service_Map_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapReduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Client_ServiceServer).Map(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Client_Service/Map",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Client_ServiceServer).Map(ctx, req.(*MapReduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Service_Reduce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapReduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Client_ServiceServer).Reduce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Client_Service/Reduce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Client_ServiceServer).Reduce(ctx, req.(*MapReduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Client_Service_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Client_ServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Client_Service/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Client_ServiceServer).Status(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _Client_Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Client_Service",
	HandlerType: (*Client_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "map",
			Handler:    _Client_Service_Map_Handler,
		},
		{
			MethodName: "reduce",
			Handler:    _Client_Service_Reduce_Handler,
		},
		{
			MethodName: "status",
			Handler:    _Client_Service_Status_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "map_reduce.proto",
}

// Server_ServiceClient is the client API for Server_Service service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Server_ServiceClient interface {
	MapDone(ctx context.Context, in *JobDoneRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	ReduceDone(ctx context.Context, in *JobDoneRequest, opts ...grpc.CallOption) (*CommonResponse, error)
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*CommonResponse, error)
}

type server_ServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServer_ServiceClient(cc grpc.ClientConnInterface) Server_ServiceClient {
	return &server_ServiceClient{cc}
}

func (c *server_ServiceClient) MapDone(ctx context.Context, in *JobDoneRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/Server_Service/map_done", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *server_ServiceClient) ReduceDone(ctx context.Context, in *JobDoneRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/Server_Service/reduce_done", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *server_ServiceClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*CommonResponse, error) {
	out := new(CommonResponse)
	err := c.cc.Invoke(ctx, "/Server_Service/register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server_ServiceServer is the server API for Server_Service service.
// All implementations must embed UnimplementedServer_ServiceServer
// for forward compatibility
type Server_ServiceServer interface {
	MapDone(context.Context, *JobDoneRequest) (*CommonResponse, error)
	ReduceDone(context.Context, *JobDoneRequest) (*CommonResponse, error)
	Register(context.Context, *RegisterRequest) (*CommonResponse, error)
	mustEmbedUnimplementedServer_ServiceServer()
}

// UnimplementedServer_ServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServer_ServiceServer struct {
}

func (UnimplementedServer_ServiceServer) MapDone(context.Context, *JobDoneRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MapDone not implemented")
}
func (UnimplementedServer_ServiceServer) ReduceDone(context.Context, *JobDoneRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReduceDone not implemented")
}
func (UnimplementedServer_ServiceServer) Register(context.Context, *RegisterRequest) (*CommonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedServer_ServiceServer) mustEmbedUnimplementedServer_ServiceServer() {}

// UnsafeServer_ServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Server_ServiceServer will
// result in compilation errors.
type UnsafeServer_ServiceServer interface {
	mustEmbedUnimplementedServer_ServiceServer()
}

func RegisterServer_ServiceServer(s *grpc.Server, srv Server_ServiceServer) {
	s.RegisterService(&_Server_Service_serviceDesc, srv)
}

func _Server_Service_MapDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Server_ServiceServer).MapDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server_Service/MapDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Server_ServiceServer).MapDone(ctx, req.(*JobDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Service_ReduceDone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(JobDoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Server_ServiceServer).ReduceDone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server_Service/ReduceDone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Server_ServiceServer).ReduceDone(ctx, req.(*JobDoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Server_Service_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Server_ServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Server_Service/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Server_ServiceServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Server_Service_serviceDesc = grpc.ServiceDesc{
	ServiceName: "Server_Service",
	HandlerType: (*Server_ServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "map_done",
			Handler:    _Server_Service_MapDone_Handler,
		},
		{
			MethodName: "reduce_done",
			Handler:    _Server_Service_ReduceDone_Handler,
		},
		{
			MethodName: "register",
			Handler:    _Server_Service_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "map_reduce.proto",
}
